#ifndef PSP_NPDRM_H
#define PSP_NPDRM_H 1

#include <stdint.h>
#include "FakeAct.h"

static const char PSP_RIF_ECDSA[0x28] = { 0x62, 0x27, 0xB0, 0x0A, 0x02, 0x85, 0x6F, 0xB0, 0x41, 0x08, 0x87, 0x67, 0x19, 0xE0, 0xA0, 0x18, 0x32, 0x91, 0xEE, 0xB9,
												0x6E, 0x73, 0x6A, 0xBF, 0x81, 0xF7, 0x0E, 0xE9, 0x16, 0x1B, 0x0D, 0xDE, 0xB0, 0x26, 0x76, 0x1A, 0xFF, 0x7B, 0xC8, 0x5B };
												
static const char DNAS_KEY1A90[0x10] = {0xED, 0xE2, 0x5D, 0x2D, 0xBB, 0xF8, 0x12, 0xE5, 0x3C, 0x5C, 0x59, 0x32, 0xFA, 0xE3, 0xE2, 0x43};
static const char DNAS_KEY1AA0[0x10] = {0x27, 0x74, 0xFB, 0xEB, 0xA4, 0xA0, 0x01, 0xD7, 0x02, 0x56, 0x9E, 0x33, 0x8C, 0x19, 0x57, 0x83};
	   
static const char PSP_RIF_AES[0x10] = {0xDA, 0x7D, 0x4B, 0x5E, 0x49, 0x9A, 0x4F, 0x53, 0xB1, 0xC1, 0xA1, 0x4A, 0x74, 0x84, 0x44, 0x3B};
static const char PSP_ACT_AES[0x10] = {0x5E, 0x06, 0xE0, 0x4F, 0xD9, 0x4A, 0x71, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
static const char PSP_EDAT_AES[0x10] = {0xBA, 0x87, 0xE4, 0xAB, 0x2C, 0x60, 0x5F, 0x59, 0xB8, 0x3B, 0xDB, 0xA6, 0x82, 0xFD, 0xAE, 0x14};
                                 
static const char VERSIONKEY_INDEX_DERIVATION_KEYS[4][0x10] = {
	{0xF0, 0x79, 0xD5, 0x19, 0x8F, 0x23, 0xEF, 0xCE, 0xB5, 0x4B, 0x9E, 0xCD, 0xCD, 0xFD, 0xD3, 0xD7},
	{0x07, 0x3D, 0x9E, 0x9D, 0xA8, 0xFD, 0x3B, 0x2F, 0x63, 0x18, 0x93, 0x2E, 0xF8, 0x57, 0xA6, 0x64},
	{0x37, 0x49, 0xB7, 0x01, 0xCA, 0xE2, 0xE0, 0xC5, 0x44, 0x2E, 0x06, 0xB6, 0x1E, 0xFF, 0x84, 0xF2},
	{0x9D, 0x31, 0xB8, 0x5A, 0xC8, 0xFA, 0x16, 0x80, 0x73, 0x60, 0x18, 0x82, 0x18, 0x77, 0x91, 0x9D}
};


typedef struct NpPgd{
	char magic[0x4];
	int key_index;
	int drm_type;
	int unk0;
	char encrypted_body[0x60];
	char pgd_ekey[0x10];
	char pgd_hash[0x10];
} __attribute__((packed)) NpPgd;

typedef struct NpDataPsp{
	char magic[0x4];
	char unk[0x7C];
	char unk2[0x32];
	char unk3[0xE];
	char hash[0x14];
	char reserved[0x58];
	char unk4[0x434];
	char content_id[0x30];
} __attribute__((packed)) NpDataPsp;

typedef struct NpUmdBdy{
	uint16_t sector_size; 	// 0x0800
	uint16_t unk_2;			// 0xE000
	uint32_t unk_4;
	uint32_t unk_8;
	uint32_t unk_12;
	uint32_t unk_16;
	uint32_t lba_start;
	uint32_t unk_24;
	uint32_t nsectors;
	uint32_t unk_32;
	uint32_t lba_end;
	uint32_t unk_40;
	uint32_t block_entry_offset;
	char disc_id[0x10];
	uint32_t header_start_offset;
	uint32_t unk_68;
	uint8_t unk_72;
	uint8_t bbmac_param;
	uint8_t unk_74;
	uint8_t unk_75;
	uint32_t unk_76;
	uint32_t unk_80;
	uint32_t unk_84;
	uint32_t unk_88;
	uint32_t unk_92;
} __attribute__((packed)) NpUmdBdy;

typedef struct NpUmdHdr{
	uint8_t magic[0x08];  // NPUMDIMG
	uint32_t key_index;
	uint32_t block_basis;
	uint8_t content_id[0x30];
	NpUmdBdy body;
	uint8_t header_key[0x10];
	uint8_t data_key[0x10];
	uint8_t header_hash[0x10];
	uint8_t padding[0x8];
	uint8_t ecdsa_signature[0x28];
} __attribute__((packed)) NpUmdHdr;


typedef struct NpPspEdat{
	char magic[0x8];
	int key_index;
	uint16_t data_offset;
	uint8_t data_type;
	uint8_t version;
	char content_id[0x30];
	uint8_t key[0x10];
	uint8_t pad[0x8];
	uint8_t ecdsa_signature[0x28];
	uint8_t header_hash[0x10];
} __attribute__((packed)) NpPspEdat;

typedef struct PspRif
{
    short version;
	short version_flag;
	uint16_t license_type;
	uint16_t drm_type;
	uint64_t account_id;
	char content_id[0x30];
	uint8_t encrypted_key_id[0x10];
	uint8_t encrypted_version_key[0x10];
	uint64_t start_time;
	uint64_t end_time;
	uint8_t ecdsa_signature[0x28];
} __attribute__((packed)) PspRif;

typedef struct PspAct
{
	short activation_type;
	short version_flag;
	int version;
	uint64_t account_id;
	uint8_t primary_key_table[0x80][0x10];
	uint8_t unk1[0x40];
	uint8_t open_psid[0x10];
	uint8_t unk2[0x10];
	uint8_t unk3[0x10];
	uint8_t second_table[0x65][0x10];
	uint8_t rsa_signature[0x100];
	uint8_t unknown_signature[0x40];
	uint8_t ecdsa_signature[0x28];
} __attribute__((packed)) PspAct;


typedef enum PspRifState{
	VALID_RIF,
	NOPSPEMUDRM_INVALID,
	OFFICAL_INVALID,
} PspRifState;


int sceNpDrmCalcPgdKey(NpPgd* pgd, char* version_key);
int sceNpDrmCalcNpUmdKey(NpUmdHdr* hdr, char* version_key);
int sceNpDrmCalcEdatKey(NpPspEdat* edat, NpPgd* pgd, char* version_key);

void sceNpDrmGenerateRif(char* content_id, const char* path, char* last_opened_drm_file);
int sceNpDrmTransformVersionKey(char* version_key, int src_key_type, int dst_key_type);
PspRifState sceNpDrmCheckRifState(char* content_id, const char* path);

#endif