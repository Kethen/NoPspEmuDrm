#ifndef PSP_NPDRM_H
#define PSP_NPDRM_H 1

#include <stdint.h>

static const char PSP_RIF_ECDSA[0x28] = { 0x62, 0x27, 0xB0, 0x0A, 0x02, 0x85, 0x6F, 0xB0, 0x41, 0x08, 0x87, 0x67, 0x19, 0xE0, 0xA0, 0x18, 0x32, 0x91, 0xEE, 0xB9,
										  0x6E, 0x73, 0x6A, 0xBF, 0x81, 0xF7, 0x0E, 0xE9, 0x16, 0x1B, 0x0D, 0xDE, 0xB0, 0x26, 0x76, 0x1A, 0xFF, 0x7B, 0xC8, 0x5B };

static const char DNAS_KEY1A90[0x10] = {0xED, 0xE2, 0x5D, 0x2D, 0xBB, 0xF8, 0x12, 0xE5, 0x3C, 0x5C, 0x59, 0x32, 0xFA, 0xE3, 0xE2, 0x43};
static const char DNAS_KEY1AA0[0x10] = {0x27, 0x74, 0xFB, 0xEB, 0xA4, 0xA0, 0x01, 0xD7, 0x02, 0x56, 0x9E, 0x33, 0x8C, 0x19, 0x57, 0x83};

static const char PSP_RIF_AES[0x10] = {0xDA, 0x7D, 0x4B, 0x5E, 0x49, 0x9A, 0x4F, 0x53, 0xB1, 0xC1, 0xA1, 0x4A, 0x74, 0x84, 0x44, 0x3B};
static const char PSP_ACT_AES[0x10] = {0x5E, 0x06, 0xE0, 0x4F, 0xD9, 0x4A, 0x71, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};

static const char VERSIONKEY_INDEX_DERIVATION_KEYS[4][0x10] = {
	{0xF0, 0x79, 0xD5, 0x19, 0x8F, 0x23, 0xEF, 0xCE, 0xB5, 0x4B, 0x9E, 0xCD, 0xCD, 0xFD, 0xD3, 0xD7},
	{0x07, 0x3D, 0x9E, 0x9D, 0xA8, 0xFD, 0x3B, 0x2F, 0x63, 0x18, 0x93, 0x2E, 0xF8, 0x57, 0xA6, 0x64},
	{0x37, 0x49, 0xB7, 0x01, 0xCA, 0xE2, 0xE0, 0xC5, 0x44, 0x2E, 0x06, 0xB6, 0x1E, 0xFF, 0x84, 0xF2},
	{0x9D, 0x31, 0xB8, 0x5A, 0xC8, 0xFA, 0x16, 0x80, 0x73, 0x60, 0x18, 0x82, 0x18, 0x77, 0x91, 0x9D}
};


typedef struct PspRif
{
    short version;
	short versionFlag;
	uint16_t licenseType;
	uint16_t drmType;
	uint64_t accountId;
	char contentId[0x30];
	uint8_t encKey1[0x10];
	uint8_t encKey2[0x10];
	uint64_t startTime;
	uint64_t endTime;
	uint8_t ecdsaSig[0x28];
} __attribute__((packed)) PspRif;

typedef struct PspAct
{
	short actType;
	short versionFlag;
	int version;
	uint64_t accountId;
	uint8_t primKeyTable[0x800];
	uint8_t unk1[0x40];
	uint8_t openPsId[0x10];
	uint8_t unk2[0x10];
	uint8_t unk4[0x10];
	uint8_t secondTable[0x650];
	uint8_t rsaSig[0x100];
	uint8_t unkSig[0x40];
	uint8_t ecdsaSig[0x28];
} __attribute__((packed)) PspAct;


typedef enum PspRifState{
	VALID_RIF,
	NOPSPEMUDRM_INVALID,
	OFFICAL_INVALID,
} PspRifState;

void sceNpDrmGenerateRif(char* contentId, const char* path);
int sceNpDrmTransformVersionKey(char* versionKey, int srcKeyType, int dstKeyType);
PspRifState sceNpDrmCheckRifState(char* contentId, const char* path);

#endif